// social.js

// test url:
// http://localhost/ems/lt.php?c=1&m=3&nl=1&s=8d3375a1fe7c64ec60bcdcb7d9dc9e3e&lid=1&l=-http--localhost/ems/p_v.php--Q-l--E-1--A-c--E-1--A-m--E-3--A-s--E-8d3375a1fe7c64ec60bcdcb7d9dc9e3e

// facebook
FB.init({
	appId: facebook_app_id,
	status:true,
	cookie:true,
	xfbml: true,  // parse XFBML
	version: 'v' + facebook_api_version
});



/*
//onload testing

var searchurl = 'https://graph.facebook.com/100002806224605_363759856999004';
$J.getJSON(searchurl, function(response) {
	for ( var i in response ) prompt('', i + ' = ' + response[i]);
});

*/





function facebook_post() {
	// push the first modal behind the Facebook "Post to your Wall" modal
	$J("#facebooksharemodal").attr('style', 'z-index: 1;');
	var url = campaign_url + '&ref=facebook';
	if ( subscriber_hash != '' ) url += '&sh=' + subscriber_hash;
	// calling the API ...
	//alert(url);
	FB.ui(
		{
			method: 'feed',
			link: url,
			picture: message_screenshot,
			//name: message_subject,
			caption: '',
			description: ''
		},
		function callback_post(response) {

			if ( !response ) return;

			$J("#dbg").append("FB posted<br />");
			if ( response ) for ( i in response ) $J("#dbg").append(i + ' = ' + response[i] + "<br />");

			if ( typeof response.error != 'undefined' ) {
				console_log(decodeURIComponent(response.error));
				return;
			}

			if ( typeof response.post_id == 'undefined' ) return;
			var postinfoid = response.post_id;
			var tmp = postinfoid.split('_');
			var post_id = tmp[1];
			var user_id = tmp[0];

			// save this share
			ac.post(
				'share.share_facebook_post_insert',
				{
					campaignid: campaign_id,
					messageid: message_id,
					subscriberhash: subscriber_hash,
					postid: post_id,
					userid: user_id
				},
				function(ary) {
					//alert(ary.succeeded + '\n\n' + ary.message);
				}
			);

			// request post info
			FB.api(
				postinfoid, // path
				{
					// params
					method: 'GET',
				},
				function callback_info(response) {
					$J("#dbg").append("FB post callback<br />");
					if ( response ) for ( i in response ) $J("#dbg").append(i + ' = ' + response[i] + "<br />");
					var completed = facebook_update_post(response);
					if ( !completed ) {
						$J.getJSON(
							'//graph.facebook.com/' + postinfoid,
							function callback_info_user(response) {
								$J("#dbg").append("FB post callback - manual<br />");
								if ( response ) for ( i in response ) $J("#dbg").append(i + ' = ' + response[i] + "<br />");
								var completed = facebook_update_post(response);
								if ( !completed ) {
									$J.getJSON(
										'//graph.facebook.com/' + user_id,
										facebook_update_user
									);
								}
							}
						);
					}
				}
			);
		}
	);
}

function facebook_update_post(response) {
	if ( !response ) return false;
	$J("#dbg").append("FB user callback<br />");
	for ( i in response ) $J("#dbg").append(i + ' = ' + response[i] + "<br />");
	if ( typeof response.error != 'undefined' ) {
		console_log(decodeURIComponent(response.error));
		return false;
	}

	var postinfoid = response.id;
	var tmp = postinfoid.split('_');
	var post_id = tmp[1];
	var user_id = tmp[0];

	// update this share
	ac.post(
		'share.share_facebook_post_update',
		{
			postid: post_id,
			content: response.message,
			userid: response.from.id, // or user_id
			fbname: response.from.name
		},
		function(ary) {
			//alert(ary.succeeded + '\n\n' + ary.message);
			$J("#facebooksharemodal").modal('hide');
		}
	);
	return true;
}

function facebook_update_user(response) {
	if ( !response ) return false;
	if ( typeof response.error != 'undefined' ) {
		console_log(decodeURIComponent(response.error.message));
		return false;
	}

	// update this share
	ac.post(
		'share.share_facebook_post_update_user',
		{
			userid: response.id,
			fbname: response.name
		},
		function(ary) {
			//alert(ary.succeeded + '\n\n' + ary.message);
		}
	);
	return true;
}

function facebook_set_user(response) {
	if ( !response ) return false;
	if ( typeof response.error != 'undefined' ) {
		console_log(decodeURIComponent(response.error.message));
		return false;
	}

	// update this share
	ac.post(
		'share.share_facebook_post_set_user',
		{
			userid: response.id,
			fbname: response.name,
			subscriberhash: subscriber_hash
		},
		function(ary) {
			//alert(ary.succeeded + '\n\n' + ary.message);
		}
	);
	return true;
}


// like
FB.Event.subscribe(
	'edge.create',
	function(response) {

		if ( !response ) return;
		if ( typeof response.error != 'undefined' ) {
			console_log(decodeURIComponent(response.error.message));
			return;
		}

		//alert('liked?!');
		// save this like
		ac.post(
			'share.share_facebook_like_insert',
			{
				campaignid: campaign_id,
				messageid: message_id,
				subscriberhash: subscriber_hash
			},
			function(ary) {
				//alert(ary.succeeded + '\n\n' + ary.message);
			}
		);

		FB.getLoginStatus(function(response) {
			if (response.status === 'connected') {
				// the user is logged in and has authenticated your
				// app, and response.authResponse supplies
				// the user's ID, a valid access token, a signed
				// request, and the time the access token
				// and signed request each expire
				var uid = response.authResponse.userID;
				var accessToken = response.authResponse.accessToken;
				//alert('UID: ' + uid + '\nToken: ' + accessToken);
				// request user info
				FB.api(
					"/me", // path
					{
						// params
						method: 'GET',
					},
					facebook_set_user
				);
			} else if (response.status === 'not_authorized') {
				// the user is logged in to Facebook,
				// but has not authenticated your app
				/*
				FB.login(function(response) {
					if (response.authResponse) {
						console_log('Welcome!  Fetching your information.... ');
						FB.api('/me', { method: 'GET' }, facebook_set_user);
					} else {
						console_log('User cancelled login or did not fully authorize.');
					}
				});
				*/
			} else {
				// the user isn't logged in to Facebook.
				/*
				FB.login(function(response) {
					if (response.authResponse) {
						console_log('Welcome!  Fetching your information.... ');
						FB.api('/me', { method: 'GET' }, facebook_update_user);
					} else {
						console_log('User cancelled login or did not fully authorize.');
					}
				});
				*/
			}
		});


		//alert('You liked the URL: ' + response);
	}
);


// like
FB.Event.subscribe(
	'message.send',
	function(response) {

		if ( !response ) return;
		if ( typeof response.error != 'undefined' ) {
			console_log(decodeURIComponent(response.error.message));
			return;
		}
		//alert('liked?!');
		// save this like
		ac.post(
			'share.share_facebook_send_insert',
			{
				campaignid: campaign_id,
				messageid: message_id,
				subscriberhash: subscriber_hash
			},
			function(ary) {
				//alert(ary.succeeded + '\n\n' + ary.message);
			}
		);

		FB.getLoginStatus(function(response) {
			if (response.status === 'connected') {
				// the user is logged in and has authenticated your
				// app, and response.authResponse supplies
				// the user's ID, a valid access token, a signed
				// request, and the time the access token
				// and signed request each expire
				var uid = response.authResponse.userID;
				var accessToken = response.authResponse.accessToken;
				//alert('UID: ' + uid + '\nToken: ' + accessToken);
				// request user info
				FB.api(
					"/me", // path
					{
						// params
						method: 'GET',
					},
					facebook_set_user
				);
			} else if (response.status === 'not_authorized') {
				// the user is logged in to Facebook,
				// but has not authenticated your app
				/*
				FB.login(function(response) {
					if (response.authResponse) {
						console_log('Welcome!  Fetching your information.... ');
						FB.api('/me', { method: 'GET' }, facebook_set_user);
					} else {
						console_log('User cancelled login or did not fully authorize.');
					}
				});
				*/
			} else {
				// the user isn't logged in to Facebook.
				/*
				FB.login(function(response) {
					if (response.authResponse) {
						console_log('Welcome!  Fetching your information.... ');
						FB.api('/me', { method: 'GET' }, facebook_update_user);
					} else {
						console_log('User cancelled login or did not fully authorize.');
					}
				});
				*/
			}
		});


		//alert('You liked the URL: ' + response);
	}
);


// twitter
window.twttr = (function (d,s,id) {
	var t, js, fjs = d.getElementsByTagName(s)[0];
	if (d.getElementById(id)) return; js=d.createElement(s); js.id=id;
	js.src="//platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs);
	return window.twttr || (t = { _e: [], ready: function(f){ t._e.push(f) } });
}(document, "script", "twitter-wjs"));


var twitter_timeout = null;
twttr.ready(function (twttr) {
	twttr.events.bind('tweet', function(event) {

		// save this share
		ac.post(
			'share.share_twitter_post_insert',
			{
				campaignid: campaign_id,
				messageid: message_id,
				subscriberhash: subscriber_hash
			},
			function(ary) {
				//alert(ary.succeeded + '\n\n' + ary.message);
				if ( !ary.succeeded ) {
					clearTimeout(twitter_timeout);
				}
			}
		);

		twitter_search_counter = 0;
		twitter_timeout = window.setTimeout(twitter_search, 1000);
	});

});

var twitter_search_counter = 0;
function twitter_search() {
	//alert('searching ' + twitter_search_counter);
	// use https://dev.twitter.com/docs/api/1/get/search instead
	var url = campaign_url + '&ref=twitter';
	if ( subscriber_hash != '' ) url += '&sh=' + subscriber_hash;
	var searchurl = "https://search.twitter.com/search.json?include_entities=1&rpp=1&page=1&q=" + escape(url) + "&callback=?";
//console.log(url);

	ac.get("share.share_twitter_search", [escape(url)], function(response) {
		//alert('searched ' + twitter_search_counter);

		$J("#dbg").append("twitter search #" + twitter_search_counter + "<br />");
		for ( i in response ) $J("#dbg").append(i + ' = ' + response[i] + "<br />");

		if ( response.statuses.length == 0 ) {
			twitter_search_counter++;
			if ( twitter_search_counter < 20 ) {
				twitter_timeout = window.setTimeout(twitter_search, 2000);
			}
			return;
		}
		twitter_search_counter = 0;

		var tweet = response.statuses[0];

		var post_id = tweet.id_str;
		var user_id = tweet.user.id;
		var content = tweet.text;
		var name = tweet.user.name;
		var screenname = tweet.user.screen_name;

		// update this share
		ac.post(
			'share.share_twitter_post_update',
			{
				campaignid: campaign_id,
				messageid: message_id,
				subscriberhash: subscriber_hash,
				postid: post_id,
				userid: user_id,
				content: content,
				twuser: name,
				twscreen: screenname
			},
			function(ary) {
				//alert(ary.succeeded + '\n\n' + ary.message);
			}
		);
	});

}


// transition for css

!function( $ ) {
	/* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
	 * ======================================================= */

	$(function () {

		$.support.transition = (function () {

			var transitionEnd = (function () {

				var el = document.createElement('bootstrap')
					, transEndEventNames = {
						'WebkitTransition' : 'webkitTransitionEnd'
						,  'MozTransition'    : 'transitionend'
						,  'OTransition'      : 'oTransitionEnd otransitionend'
						,  'transition'       : 'transitionend'
					}
					, name

				for (name in transEndEventNames){
					if (el.style[name] !== undefined) {
						return transEndEventNames[name]
					}
				}

			}())

			return transitionEnd && {
					end: transitionEnd
				}

		})()

	})
}( window.jQuery );


// Detect scroll end event
$J.fn.scrollStopped = function(callback) {           
  $J(this).scroll(function(){
      var self = this, $this = $J(self);
      if ($this.data('scrollTimeout')) {
        clearTimeout($this.data('scrollTimeout'));
      }
      $this.data('scrollTimeout', setTimeout(callback,250,self));
  });
};

// Detect touch devices
function isTouchDevice(){
    return typeof window.ontouchstart !== 'undefined';
}

// Social modal
function showModal() {
	var devWidth = $J(window).width();
	var devHeight = $J(window).height();
	var modal = $J('.mobile-modal_share');
	var closeBtn = $J('.mobile-modal_close');
	var scrollPos = $J(window).scrollTop();
	
	// Set up some sizes and positions
	modal.css({'width': devWidth});
	closeBtn.css({'left': devWidth / 2 - 24});
	
	// Init backdrop
	$J('body').prepend('<div class="mobile-backdrop"></div>');
	$J('.mobile-backdrop').animate({ opacity: 0.6 }, 200);
	
	// Restrict scrolling when modal is shown
	$J('html,body').css({overflow: 'hidden'}); // restricts scroll while modal is open
	$J(document).bind('touchmove', function(e) {
		e.preventDefault();
	});
	
	modal.show();
	modal.animate({bottom: '200px'}, 300, function() {
	});
	
	// Show close button
	closeBtn.show();
	closeBtn.animate({opacity: 1}, 200);
	$J('.mobile-backdrop').click(function() { hideModal(); });
	closeBtn.click(function() { hideModal(); });
}

function hideModal() {
	var devWidth = $J(window).width();
	var devHeight = $J(window).height();
	var modal = $J('.mobile-modal_share');
	var closeBtn = $J('.mobile-modal_close');
	modal.animate({bottom: '-' + devHeight}, 300, function() {
		modal.hide();
		$J('.mobile-backdrop').animate({ opacity: 0 }, 200, function() {
			$J('.mobile-backdrop').remove();
		});
	});
	closeBtn.animate({ opacity: 0 }, 200, function() {
		closeBtn.hide();
	});
	
	// Re-enable scrolling
	$J('html,body').css({overflow: 'visible'}); 
	$J(document).unbind('touchmove');
	
}

// define what to do when social modal opens
$J(document).ready(function () {
	$J('#socialModal').on('show', function(){});
	$J("#facebooklikemodal").modal('show');
	$J("#facebooksharemodal").modal('show');
	$J("#twittersharemodal").modal('show');
	//$J(".fbSendButton a.btnLink").attr('target', null);
	
	// I'll just put this here for now -Vince
  // Bind to window scroll or touch event
  if (isTouchDevice()) {
	  $J(window).scroll(function() {
	    $J('.archive_title').css({'opacity': 0.9});
	    var scrollPos = $J(window).scrollTop();
	  });
	  $J(window).scrollStopped(function(){
    	$J('.archive_title').css({'opacity': 1.0});
		});
	} else {
		$J(window).bind('touchstart', function() {
			$J('.archive_title').css({'opacity': 0.9});
		});
		$J(window).bind('touchend', function() {
			$J('.archive_title').css({'opacity': 1.0});
		});
	}
	
	// Bind some events
	$J('.social_share_btn').click(function() {
		showModal();
	});
});
